/*----- PROTECTED REGION ID(Axis.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        Axis.cpp
//
// description : C++ source for the Axis class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               Axis are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
// Abstract class for axis on TEX for PhyMotionMotor class
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <Axis.h>
#include <AxisClass.h>

/*----- PROTECTED REGION END -----*/	//	Axis.cpp

/**
 *  Axis class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  Stop          |  stop
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  position        |  Tango::DevDouble	Scalar
//  limit_switch_p  |  Tango::DevBoolean	Scalar
//  limit_switch_c  |  Tango::DevBoolean	Scalar
//  limit_switch_m  |  Tango::DevBoolean	Scalar
//================================================================

namespace Axis_ns
{
/*----- PROTECTED REGION ID(Axis::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	Axis::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : Axis::Axis()
 *	Description : Constructors for a Tango device
 *                implementing the classAxis
 */
//--------------------------------------------------------
Axis::Axis(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(Axis::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Axis::constructor_1
}
//--------------------------------------------------------
Axis::Axis(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(Axis::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Axis::constructor_2
}
//--------------------------------------------------------
Axis::Axis(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(Axis::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Axis::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : Axis::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void Axis::delete_device()
{
	DEBUG_STREAM << "Axis::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(Axis::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	Axis::delete_device
	delete[] attr_position_read;
	delete[] attr_limit_switch_p_read;
	delete[] attr_limit_switch_c_read;
	delete[] attr_limit_switch_m_read;
}

//--------------------------------------------------------
/**
 *	Method      : Axis::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void Axis::init_device()
{
	DEBUG_STREAM << "Axis::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(Axis::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	Axis::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_position_read = new Tango::DevDouble[1];
	attr_limit_switch_p_read = new Tango::DevBoolean[1];
	attr_limit_switch_c_read = new Tango::DevBoolean[1];
	attr_limit_switch_m_read = new Tango::DevBoolean[1];
	/*----- PROTECTED REGION ID(Axis::init_device) ENABLED START -----*/

	if(phy_motion_motor_device!=nullptr) delete phy_motion_motor_device;
	phy_motion_motor_device = new PhyMotionMotorDevice(path_to_device);

	old_state = device_state;
	
	/*----- PROTECTED REGION END -----*/	//	Axis::init_device
}

//--------------------------------------------------------
/**
 *	Method      : Axis::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void Axis::get_device_property()
{
	/*----- PROTECTED REGION ID(Axis::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	Axis::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("path_to_device"));
	dev_prop.push_back(Tango::DbDatum("encoder"));
	dev_prop.push_back(Tango::DbDatum("stop_activation"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on AxisClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		AxisClass	*ds_class =
			(static_cast<AxisClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize path_to_device from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  path_to_device;
		else {
			//	Try to initialize path_to_device from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  path_to_device;
		}
		//	And try to extract path_to_device value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  path_to_device;

		//	Try to initialize encoder from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  encoder;
		else {
			//	Try to initialize encoder from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  encoder;
		}
		//	And try to extract encoder value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  encoder;

		//	Try to initialize stop_activation from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  stop_activation;
		else {
			//	Try to initialize stop_activation from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  stop_activation;
		}
		//	And try to extract stop_activation value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  stop_activation;

	}

	/*----- PROTECTED REGION ID(Axis::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	Axis::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : Axis::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void Axis::always_executed_hook()
{
	DEBUG_STREAM << "Axis::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(Axis::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	Axis::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : Axis::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void Axis::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "Axis::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Axis::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Axis::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : Axis::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void Axis::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "Axis::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Axis::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Axis::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute position related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Axis::read_position(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Axis::read_position(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Axis::read_position) ENABLED START -----*/

	if(encoder){
        *attr_position_read = phy_motion_motor_device->readAbsolutePosition();
	}else{
	    *attr_position_read = phy_motion_motor_device->readPosition();
	}

	attr.set_value(attr_position_read);

    getStateMotor();
	
	/*----- PROTECTED REGION END -----*/	//	Axis::read_position
}
//--------------------------------------------------------
/**
 *	Write attribute position related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Axis::write_position(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Axis::write_position(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Axis::write_position) ENABLED START -----*/

	phy_motion_motor_device->getDeviceProxy()->command_inout("ResetStatus");
	phy_motion_motor_device->activation(true);
	phy_motion_motor_device->writePosition(w_val);
	
	/*----- PROTECTED REGION END -----*/	//	Axis::write_position
}
//--------------------------------------------------------
/**
 *	Read attribute limit_switch_p related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Axis::read_limit_switch_p(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Axis::read_limit_switch_p(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Axis::read_limit_switch_p) ENABLED START -----*/

	if(phy_motion_motor_device->readAxisState() & 0x10){
	    *attr_limit_switch_p_read = true;
	}else{
        *attr_limit_switch_p_read = false;
	}

	attr.set_value(attr_limit_switch_p_read);
	
	/*----- PROTECTED REGION END -----*/	//	Axis::read_limit_switch_p
}
//--------------------------------------------------------
/**
 *	Read attribute limit_switch_c related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Axis::read_limit_switch_c(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Axis::read_limit_switch_c(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Axis::read_limit_switch_c) ENABLED START -----*/

    if(phy_motion_motor_device->readAxisState() & 0x40){
        *attr_limit_switch_c_read = true;
    }else{
        *attr_limit_switch_c_read = false;
    }

	attr.set_value(attr_limit_switch_c_read);
	
	/*----- PROTECTED REGION END -----*/	//	Axis::read_limit_switch_c
}
//--------------------------------------------------------
/**
 *	Read attribute limit_switch_m related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Axis::read_limit_switch_m(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Axis::read_limit_switch_m(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Axis::read_limit_switch_m) ENABLED START -----*/
    if(phy_motion_motor_device->readAxisState() & 0x20){
        *attr_limit_switch_m_read = true;
    }else{
        *attr_limit_switch_m_read = false;
    }
	attr.set_value(attr_limit_switch_m_read);
	
	/*----- PROTECTED REGION END -----*/	//	Axis::read_limit_switch_m
}

//--------------------------------------------------------
/**
 *	Method      : Axis::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void Axis::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(Axis::add_dynamic_attributes) ENABLED START -----*/
	

	
	/*----- PROTECTED REGION END -----*/	//	Axis::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command Stop related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Axis::stop()
{
	DEBUG_STREAM << "Axis::Stop()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Axis::stop) ENABLED START -----*/

	phy_motion_motor_device->getDeviceProxy()->command_inout("Stop");
	
	/*----- PROTECTED REGION END -----*/	//	Axis::stop
}
//--------------------------------------------------------
/**
 *	Method      : Axis::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void Axis::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(Axis::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	Axis::add_dynamic_commands
}

/*----- PROTECTED REGION ID(Axis::namespace_ending) ENABLED START -----*/

void Axis::getStateMotor() {
    device_state = phy_motion_motor_device->getDeviceProxy()->state();
    device_status = phy_motion_motor_device->getDeviceProxy()->status();


    if(stop_activation){
        if(old_state!=device_state && device_state!=Tango::MOVING) phy_motion_motor_device->activation(false);
    }
    old_state = device_state;
}

/*----- PROTECTED REGION END -----*/	//	Axis::namespace_ending
} //	namespace
