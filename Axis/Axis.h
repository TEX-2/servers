/*----- PROTECTED REGION ID(Axis.h) ENABLED START -----*/
//=============================================================================
//
// file :        Axis.h
//
// description : Include file for the Axis class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
// Abstract class for axis on TEX for PhyMotionMotor class
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef Axis_H
#define Axis_H

#include <tango.h>

#include "PhyMotionMotorDevice.h"


/*----- PROTECTED REGION END -----*/	//	Axis.h

/**
 *  Axis class description:
 *    
 */

namespace Axis_ns
{
/*----- PROTECTED REGION ID(Axis::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	Axis::Additional Class Declarations

class Axis : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(Axis::Data Members) ENABLED START -----*/

private:
    PhyMotionMotorDevice *phy_motion_motor_device = nullptr;
    int axis_status;
    void getStateMotor();

    Tango::DevState old_state;

/*----- PROTECTED REGION END -----*/	//	Axis::Data Members

//	Device property data members
public:
	//	path_to_device:	Set path to PhyMotionMotor class device
	string	path_to_device;
	//	encoder:	Without encoder = false
	//  With encoder = true
	Tango::DevBoolean	encoder;
	//	stop_activation:	if true - activation disable after stop motion
	Tango::DevBoolean	stop_activation;
	//	refpos:	
	Tango::DevDouble	refpos;

//	Attribute data members
public:
	Tango::DevDouble	*attr_position_read;
	Tango::DevBoolean	*attr_limit_switch_p_read;
	Tango::DevBoolean	*attr_limit_switch_c_read;
	Tango::DevBoolean	*attr_limit_switch_m_read;
	Tango::DevDouble	*attr_decel_read;
	Tango::DevDouble	*attr_accel_read;
	Tango::DevDouble	*attr_refpos_read;
	Tango::DevDouble	*attr_speed_read;
	Tango::DevDouble	*attr_target_read;
	Tango::DevDouble	*attr_ramp_read;
	Tango::DevDouble	*attr_rawValue_read;
	Tango::DevDouble	*attr_value_read;
	Tango::DevString	*attr_version_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Axis(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Axis(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	Axis(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~Axis() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : Axis::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : Axis::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute position related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_position(Tango::Attribute &attr);
	virtual void write_position(Tango::WAttribute &attr);
	virtual bool is_position_allowed(Tango::AttReqType type);
/**
 *	Attribute limit_switch_p related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_limit_switch_p(Tango::Attribute &attr);
	virtual bool is_limit_switch_p_allowed(Tango::AttReqType type);
/**
 *	Attribute limit_switch_c related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_limit_switch_c(Tango::Attribute &attr);
	virtual bool is_limit_switch_c_allowed(Tango::AttReqType type);
/**
 *	Attribute limit_switch_m related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_limit_switch_m(Tango::Attribute &attr);
	virtual bool is_limit_switch_m_allowed(Tango::AttReqType type);
/**
 *	Attribute decel related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_decel(Tango::Attribute &attr);
	virtual void write_decel(Tango::WAttribute &attr);
	virtual bool is_decel_allowed(Tango::AttReqType type);
/**
 *	Attribute accel related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_accel(Tango::Attribute &attr);
	virtual void write_accel(Tango::WAttribute &attr);
	virtual bool is_accel_allowed(Tango::AttReqType type);
/**
 *	Attribute refpos related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_refpos(Tango::Attribute &attr);
	virtual void write_refpos(Tango::WAttribute &attr);
	virtual bool is_refpos_allowed(Tango::AttReqType type);
/**
 *	Attribute speed related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_speed(Tango::Attribute &attr);
	virtual void write_speed(Tango::WAttribute &attr);
	virtual bool is_speed_allowed(Tango::AttReqType type);
/**
 *	Attribute target related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_target(Tango::Attribute &attr);
	virtual void write_target(Tango::WAttribute &attr);
	virtual bool is_target_allowed(Tango::AttReqType type);
/**
 *	Attribute ramp related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_ramp(Tango::Attribute &attr);
	virtual void write_ramp(Tango::WAttribute &attr);
	virtual bool is_ramp_allowed(Tango::AttReqType type);
/**
 *	Attribute rawValue related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_rawValue(Tango::Attribute &attr);
	virtual void write_rawValue(Tango::WAttribute &attr);
	virtual bool is_rawValue_allowed(Tango::AttReqType type);
/**
 *	Attribute value related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_value(Tango::Attribute &attr);
	virtual void write_value(Tango::WAttribute &attr);
	virtual bool is_value_allowed(Tango::AttReqType type);
/**
 *	Attribute version related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_version(Tango::Attribute &attr);
	virtual bool is_version_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : Axis::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command Stop related method
	 *	Description: 
	 *
	 */
	virtual void stop();
	virtual bool is_Stop_allowed(const CORBA::Any &any);
	/**
	 *	Command GetProperties related method
	 *	Description: 
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarStringArray *get_properties();
	virtual bool is_GetProperties_allowed(const CORBA::Any &any);
	/**
	 *	Command On related method
	 *	Description: 
	 *
	 */
	virtual void on();
	virtual bool is_On_allowed(const CORBA::Any &any);
	/**
	 *	Command Off related method
	 *	Description: 
	 *
	 */
	virtual void off();
	virtual bool is_Off_allowed(const CORBA::Any &any);
	/**
	 *	Command SetProperties related method
	 *	Description: 
	 *
	 *	@param argin 
	 */
	virtual void set_properties(const Tango::DevVarStringArray *argin);
	virtual bool is_SetProperties_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: 
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);
	/**
	 *	Command MoveCont related method
	 *	Description: 
	 *
	 *	@param argin 
	 */
	virtual void move_cont(Tango::DevDouble argin);
	virtual bool is_MoveCont_allowed(const CORBA::Any &any);
	/**
	 *	Command Reference related method
	 *	Description: 
	 *
	 */
	virtual void reference();
	virtual bool is_Reference_allowed(const CORBA::Any &any);
	/**
	 *	Command Ajust related method
	 *	Description: 
	 *
	 *	@param argin 
	 */
	virtual void ajust(Tango::DevDouble argin);
	virtual bool is_Ajust_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : Axis::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(Axis::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	Axis::Additional Method prototypes
};

/*----- PROTECTED REGION ID(Axis::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	Axis::Additional Classes Definitions

}	//	End of namespace

#endif   //	Axis_H
