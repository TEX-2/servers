/*----- PROTECTED REGION ID(PhyMotionMotor.h) ENABLED START -----*/
//=============================================================================
//
// file :        PhyMotionMotor.h
//
// description : Include file for the PhyMotionMotor class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
// Pshenichnyi Kirill PNPI 2019
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef PhyMotionMotor_H
#define PhyMotionMotor_H

#include <tango.h>
#include <iostream>
#include <mutex>

#include "PhyMotionControlCMD.h"

/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor.h

/**
 *  PhyMotionMotor class description:
 *    
 */

namespace PhyMotionMotor_ns
{
/*----- PROTECTED REGION ID(PhyMotionMotor::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::Additional Class Declarations

class PhyMotionMotor : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(PhyMotionMotor::Data Members) ENABLED START -----*/

PhyMotionControlCMD *phy_motion_control_cmd = nullptr;
std::string str_module, str_axis, str_addr_axis_module;
std::mutex mux;
uint32_t axis_status;

/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::Data Members

//	Device property data members
public:
	//	control_device:	just path to device of PhyMotionControl
	string	control_device;
	//	module:	number of module
	Tango::DevShort	module;
	//	axis:	number of axis
	Tango::DevShort	axis;
	//	address:	just address: 0-9,A-F or @ - for all
	string	address;
	//	P01:	Type of movement (free run, relative/absolute, reference run)
	//  0 = Rotation movement (ignoring limit switches)
	//  1 = Hardware limit switches are monitored
	//  2 = Software limit switches are monitored
	//  3 = Hardware and sofrware limit swtiches are monitored
	Tango::DevShort	p01;
	//	P02:	Measuring units of movement: only used for displaying
	//  1 = step
	//  2 = mm
	//  3 = inch
	//  4 = degree
	Tango::DevShort	p02;
	//	P03:	Conversion factor for the thread
	//  
	//  Cf = therad/Number_of_steps_perrevolution
	Tango::DevDouble	p03;
	//	P04:	Start/Stop frequency
	Tango::DevDouble	p04;
	//	P07:	Emergency stop ramp
	//  Input for 
	//  I1AM0x: in 4000 Hz/s steps
	//  I4XM01: in 1Hz/steps
	Tango::DevLong	p07;
	//	P08:	f_max MØP
	//  Run frequency during initilizing (referecing)
	//  Enter in Hz (integer value)
	//  I1AM0x: 40 000 maximum
	//  I4XM01: 4 000 000 maximum
	Tango::DevLong	p08;
	//	P09:	Ramp MØP
	//  Ramp during initializing, associated to parameter P08
	//  Input for
	//  I1AM0x: in 4000 Hz/s steps
	//  I4XM01: in 1 Hz/s steps
	Tango::DevLong	p09;
	//	P10:	f_min MØP Run frequency for leaving the limit switch range
	//  
	//  Enter in Hz
	Tango::DevLong	p10;
	//	P11:	MØP offset for limit switch direction 
	//  + (away from ``LIMIT+`` switch, towards ``LIMIT?`` switch)
	//  Distance between reference point MØP and limit switch 
	//  activation
	//  Unit: is defined in parameter P02
	//  P11>=0
	Tango::DevDouble	p11;
	//	P12:	MØP offset for limit switch direction ?(away from 
	//  ``LIMIT?`` switch, towards ``LIMIT+`` switch)
	//  Distance between reference point MØP and limit switch
	//  activation
	//  Unit: is defined in parameter P02
	//  P12>=0
	Tango::DevDouble	p12;
	//	P13:	Recovery time MØP
	//  Time lapse during initialization
	//  Enter in msec
	Tango::DevLong	p13;
	//	P14:	Run frequency (max) during program operation
	//  Enter in Hz (integer value)  
	//  I1AM0x: 40 000 maximum
	//  I4XM01: 4 000 000 maximum
	Tango::DevLong	p14;
	//	P15:	Ramp for run frequency (P14)
	//  Input for
	//  I1AM0x: in 4000 Hz/s steps
	//  I4XM01: in 1 Hz/s steps
	Tango::DevLong	p15;

//	Attribute data members
public:
	Tango::DevDouble	*attr_position_read;
	Tango::DevDouble	*attr_absolute_counter_read;
	Tango::DevLong	*attr_axis_status_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	PhyMotionMotor(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	PhyMotionMotor(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	PhyMotionMotor(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~PhyMotionMotor() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : PhyMotionMotor::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : PhyMotionMotor::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute position related methods
 *	Description: For read - this is P20 parameter - mechanical zero counter
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_position(Tango::Attribute &attr);
	virtual void write_position(Tango::WAttribute &attr);
	virtual bool is_position_allowed(Tango::AttReqType type);
/**
 *	Attribute absolute_counter related methods
 *	Description: P21 Reading
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_absolute_counter(Tango::Attribute &attr);
	virtual bool is_absolute_counter_allowed(Tango::AttReqType type);
/**
 *	Attribute axis_status related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_axis_status(Tango::Attribute &attr);
	virtual bool is_axis_status_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : PhyMotionMotor::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command Stop related method
	 *	Description: 
	 *
	 */
	virtual void stop();
	virtual bool is_Stop_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : PhyMotionMotor::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(PhyMotionMotor::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::Additional Method prototypes
};

/*----- PROTECTED REGION ID(PhyMotionMotor::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::Additional Classes Definitions

}	//	End of namespace

#endif   //	PhyMotionMotor_H
