/*----- PROTECTED REGION ID(PhyMotionMotor.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        PhyMotionMotor.cpp
//
// description : C++ source for the PhyMotionMotor class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               PhyMotionMotor are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
// Pshenichnyi Kirill PNPI 2019
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <PhyMotionMotor.h>
#include <PhyMotionMotorClass.h>

/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor.cpp

/**
 *  PhyMotionMotor class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name              |  Method name
//================================================================
//  State                     |  Inherited (no method)
//  Status                    |  Inherited (no method)
//  Stop                      |  stop
//  ResetStatus               |  reset_status
//  SetMechanicalZeroCounter  |  set_mechanical_zero_counter
//  goTo                      |  go_to
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  position          |  Tango::DevDouble	Scalar
//  absolute_counter  |  Tango::DevDouble	Scalar
//  axis_status       |  Tango::DevLong	Scalar
//  activate          |  Tango::DevBoolean	Scalar
//================================================================

namespace PhyMotionMotor_ns
{
/*----- PROTECTED REGION ID(PhyMotionMotor::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : PhyMotionMotor::PhyMotionMotor()
 *	Description : Constructors for a Tango device
 *                implementing the classPhyMotionMotor
 */
//--------------------------------------------------------
PhyMotionMotor::PhyMotionMotor(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(PhyMotionMotor::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::constructor_1
}
//--------------------------------------------------------
PhyMotionMotor::PhyMotionMotor(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(PhyMotionMotor::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::constructor_2
}
//--------------------------------------------------------
PhyMotionMotor::PhyMotionMotor(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(PhyMotionMotor::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : PhyMotionMotor::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void PhyMotionMotor::delete_device()
{
	DEBUG_STREAM << "PhyMotionMotor::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(PhyMotionMotor::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::delete_device
	delete[] attr_position_read;
	delete[] attr_absolute_counter_read;
	delete[] attr_axis_status_read;
	delete[] attr_activate_read;
}

//--------------------------------------------------------
/**
 *	Method      : PhyMotionMotor::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void PhyMotionMotor::init_device()
{
	DEBUG_STREAM << "PhyMotionMotor::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(PhyMotionMotor::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_position_read = new Tango::DevDouble[1];
	attr_absolute_counter_read = new Tango::DevDouble[1];
	attr_axis_status_read = new Tango::DevLong[1];
	attr_activate_read = new Tango::DevBoolean[1];
	/*----- PROTECTED REGION ID(PhyMotionMotor::init_device) ENABLED START -----*/

	phy_motion_control_cmd = new PhyMotionControlCMD(control_device);
	str_axis = std::to_string(axis);
	str_module = std::to_string(module);

	str_addr_axis_module = address+"M"+str_module+"."+str_axis;

	// init parameters
	mux.lock();
	phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("01"),std::to_string(p01));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("02"),std::to_string(p02));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("03"),std::to_string(p03));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("04"),std::to_string(p04));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("07"),std::to_string(p07));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("08"),std::to_string(p08));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("09"),std::to_string(p09));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("10"),std::to_string(p10));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("11"),std::to_string(p11));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("12"),std::to_string(p12));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("13"),std::to_string(p13));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("14"),std::to_string(p14));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("15"),std::to_string(p15));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("16"),std::to_string(p16));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("17"),std::to_string(p17));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("23"),std::to_string(p23));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("24"),std::to_string(p24));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("25"),std::to_string(p25));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("26"),std::to_string(p26));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("27"),std::to_string(p27));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("28"),std::to_string(p28));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("30"),std::to_string(p30));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("31"),std::to_string(p31));
    phy_motion_control_cmd->setParameter(str_addr_axis_module,std::string("32"),std::to_string(p32));
	mux.unlock();

	device_state = Tango::STANDBY;
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::init_device
}

//--------------------------------------------------------
/**
 *	Method      : PhyMotionMotor::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void PhyMotionMotor::get_device_property()
{
	/*----- PROTECTED REGION ID(PhyMotionMotor::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("control_device"));
	dev_prop.push_back(Tango::DbDatum("module"));
	dev_prop.push_back(Tango::DbDatum("axis"));
	dev_prop.push_back(Tango::DbDatum("address"));
	dev_prop.push_back(Tango::DbDatum("P01"));
	dev_prop.push_back(Tango::DbDatum("P02"));
	dev_prop.push_back(Tango::DbDatum("P03"));
	dev_prop.push_back(Tango::DbDatum("P04"));
	dev_prop.push_back(Tango::DbDatum("P07"));
	dev_prop.push_back(Tango::DbDatum("P08"));
	dev_prop.push_back(Tango::DbDatum("P09"));
	dev_prop.push_back(Tango::DbDatum("P10"));
	dev_prop.push_back(Tango::DbDatum("P11"));
	dev_prop.push_back(Tango::DbDatum("P12"));
	dev_prop.push_back(Tango::DbDatum("P13"));
	dev_prop.push_back(Tango::DbDatum("P14"));
	dev_prop.push_back(Tango::DbDatum("P15"));
	dev_prop.push_back(Tango::DbDatum("P16"));
	dev_prop.push_back(Tango::DbDatum("P17"));
	dev_prop.push_back(Tango::DbDatum("P23"));
	dev_prop.push_back(Tango::DbDatum("P24"));
	dev_prop.push_back(Tango::DbDatum("P25"));
	dev_prop.push_back(Tango::DbDatum("P26"));
	dev_prop.push_back(Tango::DbDatum("P27"));
	dev_prop.push_back(Tango::DbDatum("P28"));
	dev_prop.push_back(Tango::DbDatum("P30"));
	dev_prop.push_back(Tango::DbDatum("P31"));
	dev_prop.push_back(Tango::DbDatum("P32"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on PhyMotionMotorClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		PhyMotionMotorClass	*ds_class =
			(static_cast<PhyMotionMotorClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize control_device from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  control_device;
		else {
			//	Try to initialize control_device from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  control_device;
		}
		//	And try to extract control_device value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  control_device;

		//	Try to initialize module from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  module;
		else {
			//	Try to initialize module from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  module;
		}
		//	And try to extract module value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  module;

		//	Try to initialize axis from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  axis;
		else {
			//	Try to initialize axis from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  axis;
		}
		//	And try to extract axis value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  axis;

		//	Try to initialize address from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  address;
		else {
			//	Try to initialize address from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  address;
		}
		//	And try to extract address value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  address;

		//	Try to initialize P01 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p01;
		else {
			//	Try to initialize P01 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p01;
		}
		//	And try to extract P01 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p01;

		//	Try to initialize P02 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p02;
		else {
			//	Try to initialize P02 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p02;
		}
		//	And try to extract P02 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p02;

		//	Try to initialize P03 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p03;
		else {
			//	Try to initialize P03 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p03;
		}
		//	And try to extract P03 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p03;

		//	Try to initialize P04 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p04;
		else {
			//	Try to initialize P04 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p04;
		}
		//	And try to extract P04 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p04;

		//	Try to initialize P07 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p07;
		else {
			//	Try to initialize P07 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p07;
		}
		//	And try to extract P07 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p07;

		//	Try to initialize P08 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p08;
		else {
			//	Try to initialize P08 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p08;
		}
		//	And try to extract P08 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p08;

		//	Try to initialize P09 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p09;
		else {
			//	Try to initialize P09 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p09;
		}
		//	And try to extract P09 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p09;

		//	Try to initialize P10 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p10;
		else {
			//	Try to initialize P10 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p10;
		}
		//	And try to extract P10 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p10;

		//	Try to initialize P11 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p11;
		else {
			//	Try to initialize P11 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p11;
		}
		//	And try to extract P11 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p11;

		//	Try to initialize P12 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p12;
		else {
			//	Try to initialize P12 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p12;
		}
		//	And try to extract P12 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p12;

		//	Try to initialize P13 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p13;
		else {
			//	Try to initialize P13 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p13;
		}
		//	And try to extract P13 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p13;

		//	Try to initialize P14 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p14;
		else {
			//	Try to initialize P14 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p14;
		}
		//	And try to extract P14 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p14;

		//	Try to initialize P15 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p15;
		else {
			//	Try to initialize P15 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p15;
		}
		//	And try to extract P15 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p15;

		//	Try to initialize P16 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p16;
		else {
			//	Try to initialize P16 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p16;
		}
		//	And try to extract P16 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p16;

		//	Try to initialize P17 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p17;
		else {
			//	Try to initialize P17 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p17;
		}
		//	And try to extract P17 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p17;

		//	Try to initialize P23 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p23;
		else {
			//	Try to initialize P23 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p23;
		}
		//	And try to extract P23 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p23;

		//	Try to initialize P24 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p24;
		else {
			//	Try to initialize P24 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p24;
		}
		//	And try to extract P24 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p24;

		//	Try to initialize P25 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p25;
		else {
			//	Try to initialize P25 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p25;
		}
		//	And try to extract P25 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p25;

		//	Try to initialize P26 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p26;
		else {
			//	Try to initialize P26 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p26;
		}
		//	And try to extract P26 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p26;

		//	Try to initialize P27 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p27;
		else {
			//	Try to initialize P27 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p27;
		}
		//	And try to extract P27 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p27;

		//	Try to initialize P28 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p28;
		else {
			//	Try to initialize P28 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p28;
		}
		//	And try to extract P28 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p28;

		//	Try to initialize P30 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p30;
		else {
			//	Try to initialize P30 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p30;
		}
		//	And try to extract P30 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p30;

		//	Try to initialize P31 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p31;
		else {
			//	Try to initialize P31 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p31;
		}
		//	And try to extract P31 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p31;

		//	Try to initialize P32 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  p32;
		else {
			//	Try to initialize P32 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  p32;
		}
		//	And try to extract P32 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  p32;

	}

	/*----- PROTECTED REGION ID(PhyMotionMotor::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : PhyMotionMotor::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void PhyMotionMotor::always_executed_hook()
{
	DEBUG_STREAM << "PhyMotionMotor::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(PhyMotionMotor::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : PhyMotionMotor::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void PhyMotionMotor::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "PhyMotionMotor::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(PhyMotionMotor::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : PhyMotionMotor::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void PhyMotionMotor::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "PhyMotionMotor::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(PhyMotionMotor::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute position related method
 *	Description: For read - this is P20 parameter - mechanical zero counter
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PhyMotionMotor::read_position(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PhyMotionMotor::read_position(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PhyMotionMotor::read_position) ENABLED START -----*/

    mux.lock();
    auto str_val = phy_motion_control_cmd->sendCMD(str_addr_axis_module+"P20R");  //read 20 parameter
    mux.unlock();

    *attr_position_read = std::stod(str_val);
	attr.set_value(attr_position_read);
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::read_position
}
//--------------------------------------------------------
/**
 *	Write attribute position related method
 *	Description: For read - this is P20 parameter - mechanical zero counter
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PhyMotionMotor::write_position(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PhyMotionMotor::write_position(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PhyMotionMotor::write_position) ENABLED START -----*/

	std::string str_arg;
	std::string str_w_val;

	if(w_val>=0){
	    str_w_val="+"+std::to_string(w_val);
	}else{
	    str_w_val=std::to_string(w_val);
	}

    str_arg = str_addr_axis_module+str_w_val;
	mux.lock();
	phy_motion_control_cmd->sendCMD(str_arg);
    mux.unlock();

	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::write_position
}
//--------------------------------------------------------
/**
 *	Read attribute absolute_counter related method
 *	Description: P21 Reading
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PhyMotionMotor::read_absolute_counter(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PhyMotionMotor::read_absolute_counter(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PhyMotionMotor::read_absolute_counter) ENABLED START -----*/

    mux.lock();
    auto str_val = phy_motion_control_cmd->sendCMD(str_addr_axis_module+"P21R");  //read 21 parameter
    mux.unlock();

    *attr_absolute_counter_read = std::stod(str_val);
	attr.set_value(attr_absolute_counter_read);
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::read_absolute_counter
}
//--------------------------------------------------------
/**
 *	Read attribute axis_status related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PhyMotionMotor::read_axis_status(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PhyMotionMotor::read_axis_status(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PhyMotionMotor::read_axis_status) ENABLED START -----*/

	unsigned int value;

    mux.lock();
    auto str_val = phy_motion_control_cmd->sendCMD(address+"SE"+str_module+"."+str_axis);  //read Status
    mux.unlock();

    value = std::stoi(str_val);

	axis_status = value & 0x1ffffff;
	*attr_axis_status_read = axis_status;
	attr.set_value(attr_axis_status_read);

	if(axis_status & 0xf800 ){
	    device_state=Tango::FAULT;
	    device_status = "";
	    if(axis_status & 0x8000) device_status += "Axis ENDAT error!\n";
	    if(axis_status & 0x4000) device_status += "Axis SFI error!\n";
	    if(axis_status & 0x2000) device_status += "Axis power stage error!\n";
        if(axis_status & 0x1000) device_status += "Axis limit switch error!\n";
        if(axis_status & 0x0800) device_status += "Axis internal error!\n";
	}else{
        if(axis_status & 0x10000){
            device_state = Tango::MOVING;
        }else{
            device_state = Tango::STANDBY;
        }
        device_status = "ok\n";
	}


	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::read_axis_status
}
//--------------------------------------------------------
/**
 *	Read attribute activate related method
 *	Description: Enable current in motor
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PhyMotionMotor::read_activate(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PhyMotionMotor::read_activate(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PhyMotionMotor::read_activate) ENABLED START -----*/

	// Update status if you need
	/*
    unsigned  int value;
    mux.lock();
    auto str_val = phy_motion_control_cmd->sendCMD(address+"SE"+str_module+"."+str_axis);  //read Status
    mux.unlock();

    value = std::stoi(str_val);
    axis_status = value & 0x1ffffff;
    */

	if(axis_status & 0x200){
	    *attr_activate_read = true;
	}else{
	    *attr_activate_read = false;
	}

	attr.set_value(attr_activate_read);
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::read_activate
}
//--------------------------------------------------------
/**
 *	Write attribute activate related method
 *	Description: Enable current in motor
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PhyMotionMotor::write_activate(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PhyMotionMotor::write_activate(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PhyMotionMotor::write_activate) ENABLED START -----*/

	if(w_val == true){
        phy_motion_control_cmd->sendCMD(str_addr_axis_module+"MA");         //activation
	}else{
        phy_motion_control_cmd->sendCMD(str_addr_axis_module+"MD");         //deactivation
	}
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::write_activate
}

//--------------------------------------------------------
/**
 *	Method      : PhyMotionMotor::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void PhyMotionMotor::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(PhyMotionMotor::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command Stop related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void PhyMotionMotor::stop()
{
	DEBUG_STREAM << "PhyMotionMotor::Stop()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PhyMotionMotor::stop) ENABLED START -----*/

    mux.lock();
    //phy_motion_control_cmd->sendCMD(str_addr_axis_module+"+0");
    //phy_motion_control_cmd->sendCMD(str_addr_axis_module+"S");
    phy_motion_control_cmd->sendCMD(str_addr_axis_module+"SN");     //
    mux.unlock();
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::stop
}
//--------------------------------------------------------
/**
 *	Command ResetStatus related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void PhyMotionMotor::reset_status()
{
	DEBUG_STREAM << "PhyMotionMotor::ResetStatus()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PhyMotionMotor::reset_status) ENABLED START -----*/
	
	phy_motion_control_cmd->sendCMD(address+"SEC"+str_module+"."+str_axis);
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::reset_status
}
//--------------------------------------------------------
/**
 *	Command SetMechanicalZeroCounter related method
 *	Description: Just set P20
 *
 *	@param argin 
 */
//--------------------------------------------------------
void PhyMotionMotor::set_mechanical_zero_counter(Tango::DevDouble argin)
{
	DEBUG_STREAM << "PhyMotionMotor::SetMechanicalZeroCounter()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PhyMotionMotor::set_mechanical_zero_counter) ENABLED START -----*/
	
	phy_motion_control_cmd->setParameter(str_addr_axis_module,"20",std::to_string(argin));
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::set_mechanical_zero_counter
}
//--------------------------------------------------------
/**
 *	Command goTo related method
 *	Description: 
 *
 *	@param argin 
 */
//--------------------------------------------------------
void PhyMotionMotor::go_to(Tango::DevDouble argin)
{
	DEBUG_STREAM << "PhyMotionMotor::goTo()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PhyMotionMotor::go_to) ENABLED START -----*/

	mux.lock();
	phy_motion_control_cmd->sendCMD(str_addr_axis_module+"A"+std::to_string(argin));
	mux.unlock();
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::go_to
}
//--------------------------------------------------------
/**
 *	Method      : PhyMotionMotor::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void PhyMotionMotor::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(PhyMotionMotor::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::add_dynamic_commands
}

/*----- PROTECTED REGION ID(PhyMotionMotor::namespace_ending) ENABLED START -----*/

//	Additional Methods
// //--------------------------------------------------------
// /**
//  *	Read attribute limit_switch_m related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevBoolean
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void PhyMotionMotor::read_limit_switch_m(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "PhyMotionMotor::read_limit_switch_m(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(attr_limit_switch_m_read);
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute limit_switch_c related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevBoolean
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void PhyMotionMotor::read_limit_switch_c(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "PhyMotionMotor::read_limit_switch_c(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(attr_limit_switch_c_read);
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute limit_switch_p related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevBoolean
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void PhyMotionMotor::read_limit_switch_p(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "PhyMotionMotor::read_limit_switch_p(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(attr_limit_switch_p_read);
// 	
// }


/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::namespace_ending
} //	namespace
