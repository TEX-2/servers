/*----- PROTECTED REGION ID(PhyMotionMotor.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        PhyMotionMotor.cpp
//
// description : C++ source for the PhyMotionMotor class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               PhyMotionMotor are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
// Pshenichnyi Kirill PNPI 2019
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <PhyMotionMotor.h>
#include <PhyMotionMotorClass.h>

/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor.cpp

/**
 *  PhyMotionMotor class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  Stop          |  stop
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  position          |  Tango::DevDouble	Scalar
//  absolute_counter  |  Tango::DevDouble	Scalar
//================================================================

namespace PhyMotionMotor_ns
{
/*----- PROTECTED REGION ID(PhyMotionMotor::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : PhyMotionMotor::PhyMotionMotor()
 *	Description : Constructors for a Tango device
 *                implementing the classPhyMotionMotor
 */
//--------------------------------------------------------
PhyMotionMotor::PhyMotionMotor(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(PhyMotionMotor::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::constructor_1
}
//--------------------------------------------------------
PhyMotionMotor::PhyMotionMotor(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(PhyMotionMotor::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::constructor_2
}
//--------------------------------------------------------
PhyMotionMotor::PhyMotionMotor(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(PhyMotionMotor::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : PhyMotionMotor::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void PhyMotionMotor::delete_device()
{
	DEBUG_STREAM << "PhyMotionMotor::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(PhyMotionMotor::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::delete_device
	delete[] attr_position_read;
	delete[] attr_absolute_counter_read;
}

//--------------------------------------------------------
/**
 *	Method      : PhyMotionMotor::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void PhyMotionMotor::init_device()
{
	DEBUG_STREAM << "PhyMotionMotor::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(PhyMotionMotor::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_position_read = new Tango::DevDouble[1];
	attr_absolute_counter_read = new Tango::DevDouble[1];
	/*----- PROTECTED REGION ID(PhyMotionMotor::init_device) ENABLED START -----*/

	phy_motion_control_cmd = new PhyMotionControlCMD(control_device);
	str_axis = std::to_string(axis);
	str_module = std::to_string(module);

	str_addr_axis_module = address+"M"+str_module+"."+str_axis;
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::init_device
}

//--------------------------------------------------------
/**
 *	Method      : PhyMotionMotor::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void PhyMotionMotor::get_device_property()
{
	/*----- PROTECTED REGION ID(PhyMotionMotor::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("control_device"));
	dev_prop.push_back(Tango::DbDatum("module"));
	dev_prop.push_back(Tango::DbDatum("axis"));
	dev_prop.push_back(Tango::DbDatum("address"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on PhyMotionMotorClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		PhyMotionMotorClass	*ds_class =
			(static_cast<PhyMotionMotorClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize control_device from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  control_device;
		else {
			//	Try to initialize control_device from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  control_device;
		}
		//	And try to extract control_device value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  control_device;

		//	Try to initialize module from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  module;
		else {
			//	Try to initialize module from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  module;
		}
		//	And try to extract module value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  module;

		//	Try to initialize axis from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  axis;
		else {
			//	Try to initialize axis from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  axis;
		}
		//	And try to extract axis value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  axis;

		//	Try to initialize address from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  address;
		else {
			//	Try to initialize address from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  address;
		}
		//	And try to extract address value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  address;

	}

	/*----- PROTECTED REGION ID(PhyMotionMotor::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : PhyMotionMotor::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void PhyMotionMotor::always_executed_hook()
{
	DEBUG_STREAM << "PhyMotionMotor::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(PhyMotionMotor::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : PhyMotionMotor::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void PhyMotionMotor::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "PhyMotionMotor::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(PhyMotionMotor::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : PhyMotionMotor::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void PhyMotionMotor::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "PhyMotionMotor::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(PhyMotionMotor::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute position related method
 *	Description: For read - this is P20 parameter - mechanical zero counter
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PhyMotionMotor::read_position(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PhyMotionMotor::read_position(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PhyMotionMotor::read_position) ENABLED START -----*/

    mux.lock();
    auto str_val = phy_motion_control_cmd->sendCMD(str_addr_axis_module+"P20R");  //read 20 parameter
    mux.unlock();

    *attr_position_read = std::stod(str_val);
	attr.set_value(attr_position_read);
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::read_position
}
//--------------------------------------------------------
/**
 *	Write attribute position related method
 *	Description: For read - this is P20 parameter - mechanical zero counter
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PhyMotionMotor::write_position(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PhyMotionMotor::write_position(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PhyMotionMotor::write_position) ENABLED START -----*/

	std::string str_arg;
	std::string str_w_val;

	if(w_val>=0){
	    str_w_val="+"+std::to_string(w_val);
	}else{
	    str_w_val=std::to_string(w_val);
	}

    str_arg = str_addr_axis_module+str_w_val;
	mux.lock();
	phy_motion_control_cmd->sendCMD(str_arg);
    mux.unlock();

	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::write_position
}
//--------------------------------------------------------
/**
 *	Read attribute absolute_counter related method
 *	Description: P21 Reading
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PhyMotionMotor::read_absolute_counter(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PhyMotionMotor::read_absolute_counter(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PhyMotionMotor::read_absolute_counter) ENABLED START -----*/

    mux.lock();
    auto str_val = phy_motion_control_cmd->sendCMD(str_addr_axis_module+"P21R");  //read 21 parameter
    mux.unlock();

    *attr_absolute_counter_read = std::stod(str_val);
	attr.set_value(attr_absolute_counter_read);
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::read_absolute_counter
}

//--------------------------------------------------------
/**
 *	Method      : PhyMotionMotor::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void PhyMotionMotor::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(PhyMotionMotor::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command Stop related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void PhyMotionMotor::stop()
{
	DEBUG_STREAM << "PhyMotionMotor::Stop()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PhyMotionMotor::stop) ENABLED START -----*/

    mux.lock();
    phy_motion_control_cmd->sendCMD(str_addr_axis_module+"+0");
    mux.unlock();
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::stop
}
//--------------------------------------------------------
/**
 *	Method      : PhyMotionMotor::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void PhyMotionMotor::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(PhyMotionMotor::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::add_dynamic_commands
}

/*----- PROTECTED REGION ID(PhyMotionMotor::namespace_ending) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	PhyMotionMotor::namespace_ending
} //	namespace
